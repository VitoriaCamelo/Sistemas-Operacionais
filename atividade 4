'''
A gerência do sistema de paginação através de uma tabela de páginas
'''
# Definições de Estruturas
class Entrada:
  def __init__(self, pagina, frame, presente):
    self.pagina = pagina
    self.frame = frame
    self.presente = presente

class TabelaPaginas:
  def __init__(self, tam_paginas, qtde_quadros):
    self.tam_paginas = tam_paginas
    self.qtde_quadros = qtde_quadros
    self.page_faults = 0
    self.tabela = []
    
  def inserir(self, pagina, frame, presente):
    novoElemento = Entrada(pagina, frame, presente)
    self.tabela.append(novoElemento)
    self.page_faults += 1

  def buscar(self, pagina):
    for elemento in self.tabela:
      if elemento.pagina == pagina:
        return 1
    return 0
    
  def modificar(self, pagina, frame, presente):
    for elemento in self.tabela:
      if elemento.pagina == pagina:
        elemento.frame = frame
        elemento.presente = presente
        
  def imprimir(self):
    if len(self.tabela) > 0:
      print('\n\tTabela de Páginas:')
      for elemento in self.tabela:
        print(f'\tPagina: {elemento.pagina} \t| Frame: {elemento.frame} \
        \t| Presente: {elemento.presente}')
      print(f'\nPage faults: {self.page_faults}')
    else:
      print('\nTabela de páginas vazia')
      print('Page faults: 0')

class Memoria:
  def __init__(self, tam_memoria):
    self.tam_memoria = tam_memoria
    self.preenchido = 0
    self.memoria = [-1]*tam_memoria
    self.posicao_vazia = 0
    
  def cheia(self):
    return len(self.memoria) == self.tam_memoria
  def posicaoSimples(self):
    return self.posicao_vazia
  def incrPosicao(self):
    self.posicao_vazia += 1
  def alocar(self, indice, pagina):
    self.preenchido += 1
    self.memoria[indice] = pagina
  def buscar(self, pagina):
    for elemento in self.memoria:
      if elemento == pagina:
        return 1
    return 0
  def indice(self, pagina):
    for i in range(len(self.memoria)):
      if self.memoria[i] == pagina:
        return  i
  def imprimir(self):
    print('\n\tMemória:')
    for i in range(len(self.memoria)):
      print(f'\t{i} \t| {self.memoria[i]}')
    
class LRU:
  def __init__(self, qtde_quadros):
    self.qtde_quadros = qtde_quadros
    self.fila = [-1]*qtde_quadros
    self.posicao_vazia = 0
  def adicionar(self, pagina):
    self.fila[self.posicao_vazia] = pagina
    self.posicao_vazia += 1
  def reordenar(self, pagina): 
    if pagina in self.fila: 
      indice = self.fila.index(pagina)
      if indice != qtde_quadros-1:
        if indice == 0:
          self.fila = self.fila[1:] + [pagina]
        else:
          self.fila = self.fila[:indice] + self.fila[indice+1:] + [pagina]
      # se estiver no final, não precisa mudar
  def substituir(self, pagina):
    retirado = self.fila.pop(0)
    self.fila.append(pagina)
    return retirado
  def imprimir(self):
    print('\n\tLRU:')
    for elemento in self.fila:
      print(f'\t{elemento}')
            
# Funções de Tratamento e Interface
def combo_imprimir():
  tabela.imprimir()
  memoria.imprimir()
  lru.imprimir()

def trataRequisicao(endereco):
  pagina = endereco//tam_paginas
  existe_tabela = tabela.buscar(pagina) 
  existe_memoria = memoria.buscar(pagina)
  if not existe_tabela and not memoria.cheia():
    print('\n-- Antes da operação --')
    combo_imprimir()
    # inicio
    frame = memoria.posicaoSimples()
    memoria.alocar(frame, pagina)
    memoria.incrPosicao()
    tabela.inserir(pagina, frame, 1)
    lru.adicionar(pagina)
    # fim
    print('\n-- Depois da operação --')
    combo_imprimir()
  elif existe_tabela and existe_memoria:
    print('\nEndereço encontrado na memória')
    print('\n-- Antes da operação --')
    combo_imprimir()
    # 1 operação
    lru.reordenar(pagina)
    print('\n-- Depois da operação --')
    combo_imprimir()
  else: # precisa de substituição
    if existe_tabela and not existe_memoria:
      print('\n-- Antes da operação --')
      combo_imprimir()
      # inicio
      retirado = lru.substituir(pagina)
      print('Página escolhida para substituição: ', retirado)
      indice_substituicao = memoria.indice(retirado)
      tabela.modificar(retirado, indice_substituicao, 0)
      tabela.modificar(pagina, indice_substituicao, 1)
      # fim
      print('\n-- Depois da operação --')
      combo_imprimir()
    elif not existe_tabela and memoria.cheia():
      print('\n-- Antes da operação --')
      combo_imprimir()
      # inicio
      retirado = lru.substituir(pagina)
      print('Página escolhida para substituição: ', retirado)
      indice_substituicao = memoria.indice(retirado)
      tabela.modificar(retirado, indice_substituicao, 0)
      tabela.inserir(pagina, indice_substituicao, 1)
      memoria.alocar(indice_substituicao, pagina)
      # fim
      print('\n-- Depois da operação --')
      combo_imprimir()

# Fluxo Principal
tam_paginas = int(input('Informe tamanho dos quadros: '))
qtde_quadros = int(input('Informe a quantidade de quadros: '))

tabela = TabelaPaginas(tam_paginas, qtde_quadros)
memoria = Memoria(qtde_quadros)
lru = LRU(qtde_quadros)

continuar = 1
while continuar == 1:
  print('\nDeseja continuar?')
  continuar = int(input('1 - Sim \t0 - Não\n'))
  if continuar == 0:
    break
  else:
    endereco = int(input('Qual endereço deseja acessar?: '))
    trataRequisicao(endereco)

