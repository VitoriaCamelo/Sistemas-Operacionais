#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

typedef struct pilha Pilha;
struct pilha {
  char *mensagem;
  struct pilha *prox;
};

void push(Pilha **pp, char mensagem[]) {
  Pilha *novo;
  char *p_mensagem = (char *)malloc(sizeof(char) * (strlen(mensagem) +1));
  if (!p_mensagem) {
    printf("Erro de alocação de memória.\n");
    return;
  }
  strcpy(p_mensagem, mensagem);
  novo = (Pilha *)malloc(sizeof(Pilha));
  if (!novo)
    return;
  novo->mensagem = p_mensagem;
  novo->prox = *pp;
  *pp = novo;
}

char* pop(Pilha **pp) {
  // printf("%p\n", pp);
  if (!*pp) {
    printf("Já não tem nada aqui\n");
    return NULL;
  } else {
    Pilha *temp = (*pp)->prox;
    char *mensagem = (*pp)->mensagem;
    free(*pp);
    *pp = temp;
    return mensagem;
  }
}

char* mostrar_topo(Pilha *pp) {
  if (pp)
    return pp->mensagem;
  else
    return NULL;
}

void mostrar_pilha(Pilha *pp) {
    if (pp == NULL) {
        printf("A pilha está vazia.\n");
        return;
    }
    printf("Conteudo da pilha:\n");
    Pilha *atual = pp;
    while (atual != NULL) {
        printf("%s\n", atual->mensagem);
        atual = atual->prox;
    }
}


struct argumentos{
  int id;
  Pilha **pp;
  char **mensagens;
};

void *produtor(void *arg) {
  struct argumentos *args = (struct argumentos *) arg;
  int id = args->id;
  Pilha **pp = args->pp;
  char **mensagens = args->mensagens;
  // printf("%p\n", pp);
  for(int i = 0; i < 3; i++){
    push(pp, mensagens[i]);
    mostrar_pilha(*pp);
    sleep(2);
  }
  pthread_exit(NULL);
}

void* consumidor(void *arg) {
  // falta loop de leitura
  struct argumentos *args = (struct argumentos *) arg;
  int id = args->id;
  Pilha **pp = args->pp;
  printf("end.: %p\n", pp);
  char* mensagem = pop(pp);
  printf("%s\n", mensagem);
  printf("[Consumidor %d]: %s\n", id, mensagem);
  free(mensagem);
  pthread_exit(NULL);
}

int main() {
  // falta controle de leitura (==4)
  Pilha **pp = (Pilha **)malloc(sizeof(Pilha *));
  pthread_t threads[8];
  int thread_ids[4] = {1, 2, 3, 4};
  struct argumentos args[4] = {
    {1, pp, (char *[]){"Oi,", "tudo", "bem?"}},
    {2, pp, (char *[]){"Eu", "vou", "bem"}},
    {3, pp, (char *[]){"Está", "estudando", "muito?"}},
    {4, pp, (char *[]){"Sim,", "sistemas", "operacionais"}}
  };
  
  for (int i = 0; i < 4; i++) {
    int status = pthread_create(&threads[i], NULL, produtor, &args[i]);
    if (status != 0) {
      printf("Erro ao criar um produtor\n");
      return 1;
    }
  }

  for (int i = 0; i < 4; i++) {
    int status = pthread_create(&threads[i+4], NULL, consumidor, &thread_ids[i]);
    if (status != 0) {
      printf("Erro ao criar um consumidor\n");
      return 1;
    }
  }

  for (int i = 0; i < 8; i++) {
    pthread_join(threads[i], NULL);
  }
  printf("%s", mostrar_topo(*pp));
  return 0;
}
